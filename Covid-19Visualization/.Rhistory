model_3 = glm(label ~ x + y , data = trinaryClassifierData )
summary(model_3)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
res <- predict(model_1 , train , type= "response")
res
confmatrix <- table(Actual_Value= train$label , Predicted_value = res > 0.5 )
confmatrix
#Accuracy in %
accuracy(confmatrix)
res <- predict(model_3 , train_2 , type= "response")
confmatrix <- table(Actual_Value= train_2$label , Predicted_value = res > 0.5 )
#Accuracy in %
accuracy(confmatrix)
library(class)
my_k <- c(2,3,4,5,6,7,8,9,10,11,12)
accurecy_vec <- numeric(12)
k_vec <- numeric(12)
m_vec <- vector(mode="character", length=12)
for (i in my_k ){
knnmodel <- knn(train = train[2:3], test = test[2:3], cl = train$label, k=i)
table.i <- table(knnmodel , train$label)
k_vec <- c(k_vec , i)
m_vec <- c( m_vec , "Model_1")
accurecy_vec <- c(accurecy_vec , accuracy(table.i) )
}
accurecy_vec
m_vec
accurecy_vec
for (i in my_k ){
knnmodel <- knn(train = train_2[2:3], test = test_2[2:3], cl = train_2$label, k=i)
table.i <- table(knnmodel , train_2$label)
k_vec <- c(k_vec , i)
m_vec <- c( m_vec , "Model_2")
accurecy_vec <- c(accurecy_vec , accuracy(table.i) )
}
accurecy_vec
m_vec
accurecy_vec
k_accuracy_df <-data.frame(model= m_vec , k = k_vec , accuracy = accurecy_vec)
k_accuracy_df
ggplot(k_accuracy_df , aes (k , accuracy, colour = model ) ) + geom_line() + labs( x= "k", y = "Accuracy" )
#kmeans(binaryClassifierData, centers, iter.max = 10, nstart = 1)
length(binaryClassifierData$label)
km.res <- kmeans(binaryClassifierData, 12, nstart = 1498)
km.res
km <- data.frame(km.res$centers)
km
ggplot(km , aes (x , y, colour = label ) ) + geom_point() + labs( x= "X", y = "Y" )
km.res$size
ggplot(km , aes (x , y, colour = label ) ) + geom_point() + labs( x= "X", y = "Y" ) + geom_smooth(method = "lm" , colour = "Blue" )
cor(binaryClassifierData_DF , use = "complete.obs", method = "pearson")
model_1 <- lm(binaryClassifierData_DF)
binaryClassifierData_DF$residuals <- resid(model_1)
binaryClassifierData_DF$standerdized.residuals <- rstandard(model_1)
binaryClassifierData_DF$studentized.residuals <- rstudent(model_1)
binaryClassifierData_DF$cooks.distance <- cooks.distance(model_1)
binaryClassifierData_DF$dfbeta <- dfbeta(model_1)
binaryClassifierData_DF$dffits <- dffits(model_1)
binaryClassifierData_DF$leverage <- hatvalues(model_1)
binaryClassifierData_DF$covariance.ratio <- covratio(model_1)
binaryClassifierData_DF$large.residual <- binaryClassifierData_DF$studentized.residuals > 2 | binaryClassifierData_DF$studentized.residuals < -2
binaryClassifierData_DF$fitted <- model_1$fitted.values
binaryClassifierData_DF
# scattered plot for binaryClassifierData
ggplot(binaryClassifierData , aes (x , y, colour = label ) ) + geom_point() + labs( x= "X", y = "Y" )
# scattered plot for trinaryClassifierData
ggplot(trinaryClassifierData , aes (x , y, colour = label ) ) + geom_point() + labs( x= "X", y = "Y" )
model_1 = glm(label ~ x + y , data = binaryClassifierData , family = binomial())
summary(model_1)
pred_001 = knn.reg(train = train, test = test, y = model_1, k = 1)
pred_001
res <- predict(model_1 , train , type= "response")
res
confmatrix <- table(Actual_Value= train$label , Predicted_value = res > 0.5 )
confmatrix
#Accuracy
(confmatrix[[1,1]] + confmatrix[[2,2]] )/ sum(confmatrix)
library(class)
knnModel <- knn(train = train[2:3], test = test[2:3],cl = train$label, k=20)
summary(knnModel)
##create confusion matrix
tab <- table(knnModel,test$label)
##this function divides the correct predictions by total number of predictions that tell us how accurate the model is.
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
for (i in 1:20){
knnmodel <- knn(train = train[2:3], test = test[2:3], cl = train$label, k=i)
table.i <- table(knnmodel , train$label)
print(paste("Accuricy for model k=" , i , " is " , accuracy(table.i)))
}
mjob_pred_caret <- train(train, test, method = "knn", preProcess = c("center","scale"))
mjob_pred_caret
binaryClassifierData <- read.csv("data/clustering-data.csv" )
binaryClassifierData_DF <- data.frame(binaryClassifierData)
head(binaryClassifierData)
ggplot(data = binaryClassifierData_DF, aes(y = y, x = x)) +
geom_point() + ggtitle("Actual Data - Clustering Data")
ggplot(data = binaryClassifierData_DF, aes(y = y, x = x)) +
geom_point() + ggtitle("Actual Data - Clustering Data")
set.seed(100)
k_values <- c()
tot.withinss_values <- c()
errors <- c()
for(i in 2:12){
# Read Once and Mapping the same object Multiple Times
df <- binaryClassifierData_DF
df.cluster <- kmeans(df, i)
df$cluster <- as.factor(df.cluster$cluster)
p <- ggplot(data = df,
aes(x = x,
y = y,
color = cluster)) +
geom_point(size = 0.5) +
geom_point(data = as.data.frame(df.cluster$centers),
color = "black",
shape = 10,
size = 2) +
ggtitle(paste("K-Means Cluster Plot for K = ", i, sep ="")) +
theme_bw()
print(p)
# For Later Analysis & Plot
k_values<- c(k_values, i)
tot.withinss_values <- c(tot.withinss_values, df.cluster$tot.withinss)
x.dist <- df.cluster$centers[df$cluster] - df$x
y.dist <- df.cluster$centers[as.numeric(df$cluster) + i] - df$y
tot.dist <- sqrt((x.dist ** 2) + (y.dist ** 2))
errors <- c(errors, mean(tot.dist))
}
# Assignment: ASSIGNMENT 7
# Name: Bankar, Dhiraj
# Date: 2020-10-15
library(readxl)
library(boot)
library(car)
library(mlogit)
library(foreign)
library(caTools)
library(ggplot2)
library(class)
library(Hmisc)
library(Rcmdr)
## Set the working directory to the root of your DSC 520 directory
setwd("//Users/dhirajbankar/R_Laguage/dsc520/assignments/finalProject/")
## Load the `data/r4ds/heights.csv` to
heartData <- read.csv("heart.csv" )
heartDF <- data.frame(heartData)
str(heartData)
summary(heartData)
cor(heartDF)
heartAsMatrix <- as.matrix(heartData[,c("age" ,"trestbps" )])
rcorr(heartAsMatrix)
cor.test(heartDF$age , heartDF$trestbps)
heart_mode_1 <- glm(chol ~ age, data=heartDF)
summary(heart_mode_1)
par(mfrow=c(2,2))
plot(heart_mode_1)
ggplot(data = heart_mode_1, aes(x = age )) + geom_histogram(binwidth=10) + labs(x="Age")
ggplot(data = heart_mode_1, aes(x = chol )) + geom_histogram(binwidth=10) + labs(x="Age")
## Plot the predictions against the original data
ggplot(data = heartDF, aes(y = trestbps, x = chol))
## Fit a linear model using the `chol` variable as the predictor and `blood pressure` as the outcome
heart_mode_1_lm <- lm(heartDF$chol ~ heartDF$trestbps)
heart_mode_1_lm
heart_predict_df <- data.frame(chol = predict(heart_mode_1_lm, heartDF), trestbps=heights_df$trestbps)
heart_predict_df <- data.frame(chol = predict(heart_mode_1_lm, heartDF), trestbps=heartDF$trestbps)
## Plot the predictions against the original data
ggplot(data = heartDF, aes(y = trestbps, x = chol)) +   geom_line(color='red',data = heart_predict_df, aes(y=trestbps, x=chol))
heart_mode_2 <- glm(trestbps ~ oldpeak + exang + fbs + ca, data=heartDF)
summary(heart_mode_2)
heart_mode_2 <- glm(trestbps ~ chol+ oldpeak + exang + fbs + ca, data=heartDF)
summary(heart_mode_2)
par(mfrow=c(2,2))
plot(heart_mode_2)
heart_mode_2 <- glm(trestbps ~ oldpeak, data=heartDF)
summary(heart_mode_2)
par(mfrow=c(2,2))
plot(heart_mode_2)
heart_mode_2 <- glm(trestbps ~ oldpeak, data=heartDF)
summary(heart_mode_2)
par(mfrow=c(2,2))
plot(heart_mode_2)
heart_mode_3 <- glm(trestbps ~ fbs, data=heartDF)
summary(heart_mode_3)
par(mfrow=c(2,2))
plot(heart_mode_3)
heart_mode_4 <- glm(chol ~ exang, data=heartDF)
summary(heart_mode_4)
par(mfrow=c(2,2))
plot(heart_mode_4)
heart_mode_5 <- glm(trestbps ~ chol+ oldpeak + exang + fbs + ca, data=heartDF)
summary(heart_mode_5)
par(mfrow=c(2,2))
plot(heart_mode_5)
heart_mode_5
heart_mode_1 <- glm(trestbps ~ chol, data=heartDF)
summary(heart_mode_1)
par(mfrow=c(2,2))
plot(heart_mode_1)
lm.beta(heart_mode_4)
lm.beta(heart_mode_5)
cov(heartDF)
complete.cases(heartDF)
complete.cases(heartDF)
(heartDF <- na.omit(heartDF))
length(heartDF)
(heartDF <- na.omit(heartDF))
length(heartDF)
length(heartDF$age)
(heartDF$age <- na.omit(heartDF$age))
length(heartDF$age)
na.action(heartDF)
na.action(heartDF$age)
summary(heartData)
cor(heartDF)
cov(heartDF)
cov(heartDF)
heart_mode_5 <- glm(trestbps ~ chol+ oldpeak + exang + fbs + ca, data=heartDF)
summary(heart_mode_5)
par(mfrow=c(2,2))
plot(heart_mode_5)
plot(heart_mode_5)
setwd("/Users/dhirajbankar/Coding640/Dhiraj/Weeks5&6")
#Load in libraries
library(readxl)
library(ggplot2)
library(tidyverse)
library(scales)
library(treemap)
library(plotly)
#Load in data using for tree map
animal <- read.csv("animal-population-by-breed-on_1-march-2010.csv")
animal
#Using filter only get number of animals greater than 100,000
a <- filter(animal, animal$Number.of.Animals> 100000)
#Creating treemap
treemap(a, index = c("Breed"), vSize = "Number.of.Animals", title = "Number of Animals > 100,000 by Breed", fontsize.labels = c(9,10))
#Load in the unemployment data for the area charts
data <- read.csv("unemployement-rate-1948-2010.csv")
data
#Area chart
fig <- plot_ly(x = data$Year, y = data$Value, type = 'scatter', mode = 'lines', fill = 'tozeroy')
fig <- fig%>% layout(title = 'Unemployment Rate by Year', xaxis = list(title = 'Year'), yaxis = list(title = 'Value'))
fig
fig
#Stacked area chart
ggplot(data, aes(x = Year, y = Value, fill = Period))+
geom_area()+
ggtitle("Unemployment Rate by Year and Month")
#Creating treemap
treemap(a, index = c("Breed"), vSize = "Number.of.Animals", title = "Number of Animals > 100,000 by Breed", fontsize.labels = c(9,10))
#Density plot
p <- ggplot(crime2, aes(x = murder)) +
geom_density(color = 'darkblue', fill = 'lightblue') +
ggtitle('Density of Murder rates') +
xlab('Murders') +
ylab('Density')
setwd("/Users/dhirajbankar/Coding640/DSC640/Weeks7&8")
#Load libraries
library(readxl)
library(ggplot2)
library(tidyverse)
library(plotly)
library(dbplyr)
library(scales)
#Read in file
crime <- read.csv("crimerates-by-state-2005.csv")
crime
#Drop United States and District of Columbia
crime2 <- crime[crime$state != 'United States', ]
crime2 <- crime2[crime2$state != 'District of Columbia', ]
#Scatter plot
fig <- plot_ly(x = crime2$aggravated_assault, y = crime2$motor_vehicle_theft, text = crime2$state, type = 'scatter')
fig <- fig%>% layout(title = 'Aggravated Assault versus Motor Vehicle Theft', xaxis = list(title = 'Aggravated Assault', color = 'grey'), yaxis = list(title = 'Motor Vehicle Theft', color = 'grey'))
fig
#Drop United States and District of Columbia
crime2 <- crime[crime$state != 'United States', ]
crime2 <- crime2[crime2$state != 'Illinois', ]
#Scatter plot
fig <- plot_ly(x = crime2$aggravated_assault, y = crime2$motor_vehicle_theft, text = crime2$state, type = 'scatter')
fig <- fig%>% layout(title = 'Aggravated Assault versus Motor Vehicle Theft', xaxis = list(title = 'Aggravated Assault', color = 'grey'), yaxis = list(title = 'Motor Vehicle Theft', color = 'grey'))
fig
#Bubble plot
ggplot(crime2, aes(x = burglary, y = motor_vehicle_theft, size = population)) +
geom_point(alpha = 0.5, color = 'purple') +
scale_size(range = c(.1, 15), name = 'Population', trans = 'log') +
ggtitle("Burglaries versus Motor Vehicle Thefts") +
xlab("Burglaries") +
ylab("Motor Vehicle Thefts")
#Density plot
p <- ggplot(crime2, aes(x = murder)) +
geom_density(color = 'darkblue', fill = 'lightblue') +
ggtitle('Density of Murder rates') +
xlab('Murders') +
ylab('Density')
p
setwd("/Users/dhirajbankar/Coding640/DSC640/Weeks7&8")
#Load libraries
library(readxl)
library(ggplot2)
library(tidyverse)
library(plotly)
library(dbplyr)
library(scales)
#Read in file
crime <- read.csv("crimerates-by-state-2005.csv")
crime
#Drop United States and District of Columbia
crime2 <- crime[crime$state != 'United States', ]
crime2 <- crime2[crime2$state != 'District of Columbia', ]
#Scatter plot
fig <- plot_ly(x = crime2$aggravated_assault, y = crime2$motor_vehicle_theft, text = crime2$state, type = 'scatter')
fig <- fig%>% layout(title = 'Aggravated Assault versus Motor Vehicle Theft', xaxis = list(title = 'Aggravated Assault', color = 'grey'), yaxis = list(title = 'Motor Vehicle Theft', color = 'grey'))
fig
#Bubble plot
ggplot(crime2, aes(x = burglary, y = motor_vehicle_theft, size = population)) +
geom_point(alpha = 0.5, color = 'purple') +
scale_size(range = c(.1, 15), name = 'Population', trans = 'log') +
ggtitle("Burglaries versus Motor Vehicle Thefts") +
xlab("Burglaries") +
ylab("Motor Vehicle Thefts")
#Density plot
p <- ggplot(crime2, aes(x = murder)) +
geom_density(color = 'darkblue', fill = 'lightblue') +
ggtitle('Density of Murder rates') +
xlab('Murders') +
ylab('Density')
p
fig
#Bubble plot
ggplot(crime2, aes(x = burglary, y = motor_vehicle_theft, size = population)) +
geom_point(alpha = 0.5, color = 'purple') +
scale_size(range = c(.1, 15), name = 'Population', trans = 'log') +
ggtitle("Burglaries versus Motor Vehicle Thefts") +
xlab("Burglaries") +
ylab("Motor Vehicle Thefts")
#Density plot
p <- ggplot(crime2, aes(x = murder)) +
geom_density(color = 'darkblue', fill = 'lightblue') +
ggtitle('Density of Murder rates') +
xlab('Murders') +
ylab('Density')
p
setwd("/Users/dhirajbankar/Coding640/DSC640/Week9&10")
#Load libraries
library(readxl)
library(ggplot2)
library(tidyverse)
library(plotly)
library(dbplyr)
library(scales)
library(plotly)
library(maps)
#Read in files plan to use
costco <- read.csv("costcos-geocoded.csv")
costco
nba <- read.csv("ppg2008.csv")
nba
#Heat map using NBA points and reference page. Liked the heat colors better than example
nba <- nba[order(nba$PTS),]
row.names(nba) <-nba$Name
nba <- nba[,2:20]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(5,10))
#Close up of states
map(database = 'state', col = '#cccccc')
symbols(costco$Longitude, costco$Latitude, bg = '#e2373f', fg = '#ffffff',
lwd = 0.5, circles = rep(1, length(costco$Longitude)),
inches = 0.05, add = TRUE)
symbols(costco$Longitude, costco$Latitude, bg = '#e2373f', fg = '#ffffff',
lwd = 0.5, circles = rep(1, length(costco$Longitude)),
inches = 0.05, add = TRUE)
#View with Hawaii and Alaska included
map(database = 'world', col = '#cccccc')
symbols(costco$Longitude, costco$Latitude, bg = '#e2373f', fg = '#ffffff',
lwd = 0.5, circles = rep(1, length(costco$Longitude)),
inches = 0.05, add = TRUE)
#Contour plot
#Using ggplot
of <- read.csv("faithful.csv")
of
f <- ggplot(of, aes(x = eruptions, y = waiting)) +
geom_point() +
xlim(0.5, 6) +
ylim(40, 110) +
ggtitle("Old Faithful Eruptions")
f + geom_density_2d_filled(alpha = 0.5) +
geom_density_2d(size = 0.25, colour = "black")
#Using plotly
of_matrix <- data.matrix(of)
fig5 <- plot_ly(z = ~of_matrix, type = "contour")
fig5 <- fig5%>% layout(title = "Old Faithful Eruptions")
fig5
fig5
## set working directory
setwd("/Users/dhirajbankar/Coding640/DSC640/Week11&12")
#Load libraries
library(readxl)
library(ggplot2)
library(tidyverse)
library(plotly)
library(dbplyr)
library(scales)
library(plotly)
#Read in file for histogram
education <- read.csv("education.csv")
education
#Histogram
hist(education$dropout_rate,
main = "Drop out rates from the United States",
xlab = "Drop out rates",
border = "blue",
col = 'green')
#Histogram
hist(education$dropout_rate,
main = "Drop out rates from the United States",
xlab = "Drop out rates",
border = "blue",
col = 'green')
#Histogram
hist(education$dropout_rate,
main = "Drop out rates from the United States",
xlab = "Drop out rates",
border = "blue",
col = 'green')
#Histogram
hist(education$dropout_rate,
main = "Drop out rates from the United States",
xlab = "Drop out rates",
border = "blue",
col = 'green')
#Read in file for box chart
dodgers = read.csv('dodgers.csv')
dodgers
#Boxplot
boxplot(attend~shirt, data = dodgers, main = "Shirt Promotion by Attendance", xlab = "Shirt promotion", ylab = "Attendance")
#Histogram
hist(education$dropout_rate,
main = "Drop out rates from the United States",
xlab = "Drop out rates",
border = "blue",
col = 'green')
dev.new(width=10, height=10)
education
dev.new(width=10, height=10)
#Histogram
hist(education$dropout_rate,
main = "Drop out rates from the United States",
xlab = "Drop out rates",
border = "blue",
col = 'green')
#Read in file for box chart
dodgers = read.csv('dodgers.csv')
dodgers
#Boxplot
boxplot(attend~shirt, data = dodgers, main = "Shirt Promotion by Attendance", xlab = "Shirt promotion", ylab = "Attendance")
#Read in file for bullet chart
perform <- read.csv("StudentsPerformance.csv")
perform
#Find mean of writing score
result.mean <- mean(perform$writing.score)
print(result.mean)
#Bullet chart
fig <- plot_ly(
type = "indicator",
mode = "number+gauge+delta",
gauge = list(shape = "bullet",
steps = list(
list(range = c(0,50), color = 'red'),
list(range = c(50, 75), color = 'yellow'),
list(range = c(75,100), color = 'green')),
bar = list(color = 'black')),
delta = list(reference = 100),
value = 68.1,
domain = list(x = c(0, 1), y = c(0, 1)),
title= list(
text = "Writing score",
font = list(size = 7)),
height = 150)
fig
red
#Bullet chart
fig <- plot_ly(
type = "indicator",
mode = "number+gauge+delta",
gauge = list(shape = "bullet",
steps = list(
list(range = c(0,50), color = 'red'),
list(range = c(50, 75), color = 'yellow'),
list(range = c(75,100), color = 'green')),
bar = list(color = 'black')),
delta = list(reference = 100),
value = 68.1,
domain = list(x = c(0, 1), y = c(0, 1)),
title= list(
text = "Writing score",
font = list(size = 7)),
height = 150)
fig
#Read in file for my choice
crime <- read.csv("crimerates-by-state-2005.csv")
crime
#Drop United States and District of Columbia
crime2 <- crime[crime$state != 'United States', ]
crime2 <- crime2[crime2$state != 'District of Columbia', ]
#Scatter plot different than weeks 7&8
ggplot(crime2, aes(x= robbery, y = motor_vehicle_theft)) +
geom_point(shape = 3, fill = 'blue', size = 3) +
ggtitle("Comparison of Robbery and Motor Vehicle Theft") +
xlab("Robberies") +
ylab("Motor Vehicle Thefts")
reticulate::repl_python()
